package main

import (
	"errors"
	"fmt"
	"strconv"
	"strings"
	"unicode"
)

func evaluate(a, b float64, op rune) (float64, error) {
	switch op {
	case '+':
		return a + b, nil
	case '-':
		return a - b, nil
	case '*':
		return a * b, nil
	case '/':
		if b == 0 {
			return 0, errors.New("Нельзя делить на 0")
		}
		return a / b, nil
	default:
		return 0, errors.New("Неизвестный оператор")
	}
}

func Calc(expression string) (float64, error) {
	expression = strings.ReplaceAll(expression, " ", "")
	if expression == "" {
		return 0, errors.New("Пусто")
	}

	var nums []float64
	var ops []rune
	priority := map[rune]int{
		'+': 1,
		'-': 1,
		'*': 2,
		'/': 2,
	}

	for i := 0; i < len(expression); i++ {
		char := rune(expression[i])

		if unicode.IsDigit(char) {
			j := i
			for j < len(expression) && (unicode.IsDigit(rune(expression[j])) || expression[j] == '.') {
				j++
			}
			num, err := strconv.ParseFloat(expression[i:j], 64)
			if err != nil {
				return 0, err
			}
			nums = append(nums, num)
			i = j - 1
		} else if char == '(' {
			ops = append(ops, char)
		} else if char == ')' {
			for len(ops) > 0 && ops[len(ops)-1] != '(' {
				if err := processTop(&nums, &ops); err != nil {
					return 0, err
				}
			}
			if len(ops) == 0 {
				return 0, errors.New("Ошибка со скобками")
			}
			ops = ops[:len(ops)-1]
		} else if opPriority, isOp := priority[char]; isOp {
			for len(ops) > 0 && ops[len(ops)-1] != '(' && priority[ops[len(ops)-1]] >= opPriority {
				if err := processTop(&nums, &ops); err != nil {
					return 0, err
				}
			}
			ops = append(ops, char)
		} else {
			return 0, fmt.Errorf("Недопустимый символ '%c'", char)
		}
	}

	for len(ops) > 0 {
		if ops[len(ops)-1] == '(' {
			return 0, errors.New("Ошибка со скобками")
		}
		if err := processTop(&nums, &ops); err != nil {
			return 0, err
		}
	}

	if len(nums) != 1 {
		return 0, errors.New("Ошибка в выражении")
	}

	return nums[0], nil
}

func processTop(nums *[]float64, ops *[]rune) error {
	if len(*nums) < 2 || len(*ops) == 0 {
		return errors.New("Неправильное выражение")
	}

	b, a := (*nums)[len(*nums)-1], (*nums)[len(*nums)-2]
	*nums = (*nums)[:len(*nums)-2]
	op := (*ops)[len(*ops)-1]
	*ops = (*ops)[:len(*ops)-1]

	res, err := evaluate(a, b, op)
	if err != nil {
		return err
	}
	*nums = append(*nums, res)
	return nil
}
